[{"categories":null,"content":"这个主人很懒，什么也没留下… ","date":"2022-04-24","objectID":"/about/:0:0","tags":null,"title":"","uri":"/about/"},{"categories":["Raspberry"],"content":"一、介绍 1、官网Docs 2、简介 wifi模块作为客户端与服务器连接同一wifi 客户端尝试与服务器建立连接，成功建立连接后客户端向服务器发出信号 服务器收到信号后向客户端发送时间相关的信息， 客户端收到后将时间信息转换为8x32柔性屏对应的指令并发送，柔性屏收到后显示 ","date":"2019-05-29","objectID":"/2019-05-29-%E5%83%8F%E7%B4%A0%E6%97%B6%E9%92%9F/:1:0","tags":["Raspberry","DIY"],"title":"DIY一个炫酷的像素时钟","uri":"/2019-05-29-%E5%83%8F%E7%B4%A0%E6%97%B6%E9%92%9F/"},{"categories":["Raspberry"],"content":"二、配件清单 ","date":"2019-05-29","objectID":"/2019-05-29-%E5%83%8F%E7%B4%A0%E6%97%B6%E9%92%9F/:2:0","tags":["Raspberry","DIY"],"title":"DIY一个炫酷的像素时钟","uri":"/2019-05-29-%E5%83%8F%E7%B4%A0%E6%97%B6%E9%92%9F/"},{"categories":["Raspberry"],"content":"1、ESP8266 WIFI模块 CP2102 ESP-12E（￥27.83） ","date":"2019-05-29","objectID":"/2019-05-29-%E5%83%8F%E7%B4%A0%E6%97%B6%E9%92%9F/:2:1","tags":["Raspberry","DIY"],"title":"DIY一个炫酷的像素时钟","uri":"/2019-05-29-%E5%83%8F%E7%B4%A0%E6%97%B6%E9%92%9F/"},{"categories":["Raspberry"],"content":"2、8x32 WS2812B 柔性软屏（￥114） 说起这个柔性软屏就很厉害了，它不需要驱动，一共256个点，每个点都带有一块芯片和LED， 平均算下来，芯片+LED+电容不到5毛钱 ","date":"2019-05-29","objectID":"/2019-05-29-%E5%83%8F%E7%B4%A0%E6%97%B6%E9%92%9F/:2:2","tags":["Raspberry","DIY"],"title":"DIY一个炫酷的像素时钟","uri":"/2019-05-29-%E5%83%8F%E7%B4%A0%E6%97%B6%E9%92%9F/"},{"categories":["Raspberry"],"content":"3、外壳（￥30） 如何封装每个人都有自己的喜好，我这里选择的低成本亚克力外壳 在淘宝找店家做的，最好多问几家，有的给的价格虚高 ","date":"2019-05-29","objectID":"/2019-05-29-%E5%83%8F%E7%B4%A0%E6%97%B6%E9%92%9F/:2:3","tags":["Raspberry","DIY"],"title":"DIY一个炫酷的像素时钟","uri":"/2019-05-29-%E5%83%8F%E7%B4%A0%E6%97%B6%E9%92%9F/"},{"categories":["Raspberry"],"content":"4、树莓派（可选） ","date":"2019-05-29","objectID":"/2019-05-29-%E5%83%8F%E7%B4%A0%E6%97%B6%E9%92%9F/:2:4","tags":["Raspberry","DIY"],"title":"DIY一个炫酷的像素时钟","uri":"/2019-05-29-%E5%83%8F%E7%B4%A0%E6%97%B6%E9%92%9F/"},{"categories":["Raspberry"],"content":"5、3D打印的光栅（可选） 光栅建议选择深色不透明材料 3D图纸下载 ","date":"2019-05-29","objectID":"/2019-05-29-%E5%83%8F%E7%B4%A0%E6%97%B6%E9%92%9F/:2:5","tags":["Raspberry","DIY"],"title":"DIY一个炫酷的像素时钟","uri":"/2019-05-29-%E5%83%8F%E7%B4%A0%E6%97%B6%E9%92%9F/"},{"categories":["Raspberry"],"content":"三、软件 ","date":"2019-05-29","objectID":"/2019-05-29-%E5%83%8F%E7%B4%A0%E6%97%B6%E9%92%9F/:3:0","tags":["Raspberry","DIY"],"title":"DIY一个炫酷的像素时钟","uri":"/2019-05-29-%E5%83%8F%E7%B4%A0%E6%97%B6%E9%92%9F/"},{"categories":["Raspberry"],"content":"1、Controller （1）下载Visual Studio Code，安装Platform.IO How to install Platform.IO （2）下载wifi模块固件，并在Platform.IO中打开 Download AWTRIX2.0-Controller (3) 设置服务器信息 打开awtrix-conf.h，修改以下内容： // Wifi Config const char *ssid = \"YourSSID\"; const char *password = \"YourPassword\"; char *awtrix_server = \"192.168.178.39\"; ssid wifi名称 password wifi密码 awtrix_server 服务器IP (4) 连接wifi模块，刷写固件 wifi连接micro USB线后，在Platform.IO的Devices中，应该会找到对应的设备，如果没有，可以尝试安装下面这个驱动： 驱动 Devices中找到对应设备后，点击刷写按钮完成刷写 ","date":"2019-05-29","objectID":"/2019-05-29-%E5%83%8F%E7%B4%A0%E6%97%B6%E9%92%9F/:3:1","tags":["Raspberry","DIY"],"title":"DIY一个炫酷的像素时钟","uri":"/2019-05-29-%E5%83%8F%E7%B4%A0%E6%97%B6%E9%92%9F/"},{"categories":["Raspberry"],"content":"2、Server Server可以运行在任意平台，只要支持Java8就可以，对别的没有要求。 Server的部署见官方文档 ","date":"2019-05-29","objectID":"/2019-05-29-%E5%83%8F%E7%B4%A0%E6%97%B6%E9%92%9F/:3:2","tags":["Raspberry","DIY"],"title":"DIY一个炫酷的像素时钟","uri":"/2019-05-29-%E5%83%8F%E7%B4%A0%E6%97%B6%E9%92%9F/"},{"categories":["Raspberry"],"content":"四、组装 ","date":"2019-05-29","objectID":"/2019-05-29-%E5%83%8F%E7%B4%A0%E6%97%B6%E9%92%9F/:4:0","tags":["Raspberry","DIY"],"title":"DIY一个炫酷的像素时钟","uri":"/2019-05-29-%E5%83%8F%E7%B4%A0%E6%97%B6%E9%92%9F/"},{"categories":["Raspberry"],"content":"五、演示 ","date":"2019-05-29","objectID":"/2019-05-29-%E5%83%8F%E7%B4%A0%E6%97%B6%E9%92%9F/:5:0","tags":["Raspberry","DIY"],"title":"DIY一个炫酷的像素时钟","uri":"/2019-05-29-%E5%83%8F%E7%B4%A0%E6%97%B6%E9%92%9F/"},{"categories":["Raspberry"],"content":"六、参考 ","date":"2019-05-29","objectID":"/2019-05-29-%E5%83%8F%E7%B4%A0%E6%97%B6%E9%92%9F/:6:0","tags":["Raspberry","DIY"],"title":"DIY一个炫酷的像素时钟","uri":"/2019-05-29-%E5%83%8F%E7%B4%A0%E6%97%B6%E9%92%9F/"},{"categories":["C"],"content":"一、简介 ","date":"2018-06-12","objectID":"/2018-06-12-json%E8%A7%A3%E6%9E%90cjson/:0:0","tags":["JSON","C"],"title":"JSON解析——cJSON","uri":"/2018-06-12-json%E8%A7%A3%E6%9E%90cjson/"},{"categories":["C"],"content":"cJSON Source Code cJSON 是一个以ANSI C (C89) 标准编写的轻量级JSON解析库。 ","date":"2018-06-12","objectID":"/2018-06-12-json%E8%A7%A3%E6%9E%90cjson/:0:1","tags":["JSON","C"],"title":"JSON解析——cJSON","uri":"/2018-06-12-json%E8%A7%A3%E6%9E%90cjson/"},{"categories":["C"],"content":"Introducing JSON ","date":"2018-06-12","objectID":"/2018-06-12-json%E8%A7%A3%E6%9E%90cjson/:0:2","tags":["JSON","C"],"title":"JSON解析——cJSON","uri":"/2018-06-12-json%E8%A7%A3%E6%9E%90cjson/"},{"categories":["C"],"content":"JSON在线解析 二、How To Use cJSON包含两个文件：cJSON.c、cJSON.h。在代码中includecJSON.h即可。例如： #include \"cJSON.h\" 目录结构： . ├── cJSON.c ├── cJSON.h ├── cJSON_test.c ├── Makefile └── test.json cJSON_test.c: #include \u003cstdio.h\u003e#include \u003cstdlib.h\u003e#include \u003cstring.h\u003e#include \"cJSON.h\" #define JSON_FILE_PATH \"./test.json\" #define JSON_FILE_SIZE 1024 int readValueFromFile(char* fileName, char* buff, int len) { int ret = -1; FILE *fp = fopen(fileName, \"r\"); if (fp == NULL) { printf(\"Unable to open file %s\", fileName); return -1; } else { if (fread(buff, sizeof(char), len, fp)\u003e0) { ret = 0; } } fclose(fp); return ret; } /** * [printJson 遍历JSON] */ void printJson(cJSON * root) { char buf[500]; memset(buf, 0, sizeof(buf)); //遍历最外层json键值对 for(int i=0; i\u003ccJSON_GetArraySize(root); i++) { cJSON * item = cJSON_GetArrayItem(root, i); //如果对应键的值仍为cJSON_Object就递归调用printJson if(cJSON_Object == item-\u003etype) { printJson(item); } //值不为json对象就直接打印出键和值 else { printf(\"%s:%s\\n\", item-\u003estring, cJSON_Print(item)); } } } int main() { cJSON *root = NULL; cJSON *item = NULL;//cjson对象 char jsonStr[JSON_FILE_SIZE]; memset(jsonStr, 0, sizeof(jsonStr)); readValueFromFile(JSON_FILE_PATH, jsonStr, sizeof(jsonStr)); // printf(\"jsonStr=%s\\n\", jsonStr); root = cJSON_Parse(jsonStr); if (!root) { printf(\"Error before: [%s]\\n\",cJSON_GetErrorPtr()); } else { printf(\"\\n%s\\n\", \"print all:\"); printJson(root); } return 0; } JSON: { \"station_name\": \"Module\", \"structure\": { \"module\": { \"num\": 1, \"rule\": \"023M\", \"sn_len\": 24 }, \"cell\": { \"num\": 7, \"rule\": \"NULL\", \"sn_len\": 14 } } } 输出结果： print all: station_name:\"Module\" num:1 rule:\"023M\" sn_len:24 num:7 rule:\"NULL\" sn_len:14 ","date":"2018-06-12","objectID":"/2018-06-12-json%E8%A7%A3%E6%9E%90cjson/:0:3","tags":["JSON","C"],"title":"JSON解析——cJSON","uri":"/2018-06-12-json%E8%A7%A3%E6%9E%90cjson/"},{"categories":["Raspberry"],"content":"一、Wiring Pi WiringPi is a PIN based GPIO access library written in C for the BCM2835, BCM2836 and BCM2837 SoC devices used in all Raspberry Pi. ","date":"2018-04-12","objectID":"/2018-04-12-raspberry-gpiowiringpi-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/:1:0","tags":["Raspberry","C"],"title":"Raspberry GPIO —— WiringPi  交叉编译","uri":"/2018-04-12-raspberry-gpiowiringpi-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/"},{"categories":["Raspberry"],"content":"二、交叉编译 程序在虚拟机编译，在树莓派运行。 ","date":"2018-04-12","objectID":"/2018-04-12-raspberry-gpiowiringpi-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/:2:0","tags":["Raspberry","C"],"title":"Raspberry GPIO —— WiringPi  交叉编译","uri":"/2018-04-12-raspberry-gpiowiringpi-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/"},{"categories":["Raspberry"],"content":"（1）toochain 交叉编译工具链 Download： $ git clone https://github.com/raspberrypi/tools.git 根据虚拟机配置添加环境变量到 /etc/profile末尾： 32bit： export PATH=$PATH:/your path/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian/bin 64bit： export PATH=$PATH:/your path/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin 更新环境变量： source /etc/profile 测试： $ arm-linux-gnueabihf-gcc -v ","date":"2018-04-12","objectID":"/2018-04-12-raspberry-gpiowiringpi-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/:2:1","tags":["Raspberry","C"],"title":"Raspberry GPIO —— WiringPi  交叉编译","uri":"/2018-04-12-raspberry-gpiowiringpi-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/"},{"categories":["Raspberry"],"content":"（2）Download and Install on Raspberry $ git clone git://git.drogon.net/wiringPi $ cd wiringPi $ ./build $ gpio -v Test: $ gpio -v $ gpio readall ","date":"2018-04-12","objectID":"/2018-04-12-raspberry-gpiowiringpi-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/:2:2","tags":["Raspberry","C"],"title":"Raspberry GPIO —— WiringPi  交叉编译","uri":"/2018-04-12-raspberry-gpiowiringpi-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/"},{"categories":["Raspberry"],"content":"（3）copy Wiring Pi Lib to VM Wiring Pi在Raspberry上安装后，会在 /usr/local/lib 下生成lib文件 libwiringPi.so 、libwiringPiDev.so; 在 /usr/local/include 下生成 wiringPi.h。将Raspberry中的lib、.h拷贝到VM中。 文件名 Raspberry VM 执行操作 libwiringPi.so、libwiringPiDev.so /usr/local/lib your wiringPiLib path copy wiringPi.h /usr/local/include your wiringPiLib path copy ","date":"2018-04-12","objectID":"/2018-04-12-raspberry-gpiowiringpi-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/:2:3","tags":["Raspberry","C"],"title":"Raspberry GPIO —— WiringPi  交叉编译","uri":"/2018-04-12-raspberry-gpiowiringpi-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/"},{"categories":["Raspberry"],"content":"（4）compile on VM demo #include \u003cstdio.h\u003e#include \u003cwiringPi.h\u003e #define TEST_GPIO 24 int main(void) { wiringPiSetup(); pinMode(TEST_GPIO, OUTPUT); for(;;) { digitalWrite(TEST_GPIO, HIGH); delay(500); digitalWrite(TEST_GPIO, LOW); delay(500); } return 0; } makefile src += ./gpio.c target = ./gpio cc = arm-linux-gcc obj = $(src:%.c=%.o) $(target):$(obj) $(cc) $^ -o $@ $(cflags) $(ldflags) -I/your wiringPiLib path -L/your wiringPiLib path -lwiringPi -lwiringPiDev -lpthread -lrt -lm -lcrypt %.o:%.c $(cc) -c $\u003c -o $@ $(cflags) $(cppflags) -I/your wiringPiLib path -L/your wiringPiLib path -lwiringPi -lwiringPiDev -lpthread -lrt -lm -lcrypt .phony:clean clean: rm *.o $(obj) $(target) -fr -I和-L分别指定了需要include的.h路径和需要链接的lib路径 ","date":"2018-04-12","objectID":"/2018-04-12-raspberry-gpiowiringpi-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/:2:4","tags":["Raspberry","C"],"title":"Raspberry GPIO —— WiringPi  交叉编译","uri":"/2018-04-12-raspberry-gpiowiringpi-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/"},{"categories":["Raspberry"],"content":"三、Raspberry 40 Pin 引脚对照表（图片摘自树莓派实验室） ","date":"2018-04-12","objectID":"/2018-04-12-raspberry-gpiowiringpi-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/:3:0","tags":["Raspberry","C"],"title":"Raspberry GPIO —— WiringPi  交叉编译","uri":"/2018-04-12-raspberry-gpiowiringpi-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/"},{"categories":["Raspberry"],"content":"一、Raspberry 二、Config ","date":"2018-03-14","objectID":"/2018-03-14-raspberry-in-common-use/:0:0","tags":["Raspberry"],"title":"Raspberry in common use","uri":"/2018-03-14-raspberry-in-common-use/"},{"categories":["Raspberry"],"content":"（1）设置静态IP /etc/network/interfaces\rauto eth0\riface eth0 inet static\raddress xxx.xxx.xxx.xxx\rgateway xxx.xxx.xxx.xxx\rnetmask 255.255.255.0\r 重置网络： $ /etc/init.d/networking restart ","date":"2018-03-14","objectID":"/2018-03-14-raspberry-in-common-use/:1:0","tags":["Raspberry"],"title":"Raspberry in common use","uri":"/2018-03-14-raspberry-in-common-use/"},{"categories":["Raspberry"],"content":"（2）设置路由 $ route add default gw xxx.xxx.xxx.xxx ","date":"2018-03-14","objectID":"/2018-03-14-raspberry-in-common-use/:2:0","tags":["Raspberry"],"title":"Raspberry in common use","uri":"/2018-03-14-raspberry-in-common-use/"},{"categories":["Raspberry"],"content":"（3）DNS /etc/resolv.conf\r ","date":"2018-03-14","objectID":"/2018-03-14-raspberry-in-common-use/:3:0","tags":["Raspberry"],"title":"Raspberry in common use","uri":"/2018-03-14-raspberry-in-common-use/"},{"categories":["Raspberry"],"content":"（4）挂载 $ mount -o nolock,wsize=1024,rsize=1024 目标主机IP:挂载路径 树莓派路径 ","date":"2018-03-14","objectID":"/2018-03-14-raspberry-in-common-use/:4:0","tags":["Raspberry"],"title":"Raspberry in common use","uri":"/2018-03-14-raspberry-in-common-use/"},{"categories":["Raspberry"],"content":"（5）显示器分辨率设置 ","date":"2018-03-14","objectID":"/2018-03-14-raspberry-in-common-use/:5:0","tags":["Raspberry"],"title":"Raspberry in common use","uri":"/2018-03-14-raspberry-in-common-use/"},{"categories":["Raspberry"],"content":"（6）禁止屏幕休眠 禁止屏幕进入保护和关闭状态： /etc/bash.bashrc\rsetterm -blank 0 -powerdown 0\r ","date":"2018-03-14","objectID":"/2018-03-14-raspberry-in-common-use/:6:0","tags":["Raspberry"],"title":"Raspberry in common use","uri":"/2018-03-14-raspberry-in-common-use/"},{"categories":["Raspberry"],"content":"（7）制作镜像 ","date":"2018-03-14","objectID":"/2018-03-14-raspberry-in-common-use/:7:0","tags":["Raspberry"],"title":"Raspberry in common use","uri":"/2018-03-14-raspberry-in-common-use/"},{"categories":["Raspberry"],"content":"（8）enable ssh Enter sudo raspi-config in a terminal window Select Interfacing Options Navigate to and select SSH Choose Yes Select Ok Choose Finish $ service sshd restart ","date":"2018-03-14","objectID":"/2018-03-14-raspberry-in-common-use/:8:0","tags":["Raspberry"],"title":"Raspberry in common use","uri":"/2018-03-14-raspberry-in-common-use/"},{"categories":["QT"],"content":"一、QCustomPlot简介 ","date":"2017-12-28","objectID":"/2017-12-28-qt%E5%9B%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-qcustomplot/:0:0","tags":["QT","C++"],"title":"QT图表解决方案-QCustomPlot","uri":"/2017-12-28-qt%E5%9B%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-qcustomplot/"},{"categories":["QT"],"content":"QCustomPlot官网 QCustomPlot是一个用于编写可视化图表的 QT C++库。 ","date":"2017-12-28","objectID":"/2017-12-28-qt%E5%9B%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-qcustomplot/:1:0","tags":["QT","C++"],"title":"QT图表解决方案-QCustomPlot","uri":"/2017-12-28-qt%E5%9B%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-qcustomplot/"},{"categories":["QT"],"content":"目录结构 qcustomplot.cpp、qcustomplot.h为源码文件，需要添加到自己的工程中。 example文件夹下有4个官方提供的demo，编译后可以直接运行。 二、使用 本文举的例子：不断接收指定数据，实时刷新图表，最终绘制成一副完整的图表。 本文编写时使用版本： Version: 2.0.0\r ","date":"2017-12-28","objectID":"/2017-12-28-qt%E5%9B%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-qcustomplot/:2:0","tags":["QT","C++"],"title":"QT图表解决方案-QCustomPlot","uri":"/2017-12-28-qt%E5%9B%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-qcustomplot/"},{"categories":["QT"],"content":"1、引入QCustomPlot 将源码文件添加到工程中。 qcustomplot.cpp\rqcustomplot.h\r ","date":"2017-12-28","objectID":"/2017-12-28-qt%E5%9B%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-qcustomplot/:3:0","tags":["QT","C++"],"title":"QT图表解决方案-QCustomPlot","uri":"/2017-12-28-qt%E5%9B%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-qcustomplot/"},{"categories":["QT"],"content":"2、创建plot void MainWindow::plotsInit(void) { customPlot = new QCustomPlot(this); customPlot-\u003esetGeometry(screen_w*0/1024, screen_h*120/600, screen_w*1024/1024, screen_h*470/600);//设置曲线系坐标 customPlot-\u003eyAxis-\u003esetLabel(tr(\"压力(Pa)\")); customPlot-\u003elegend-\u003esetVisible(true); //添加第一条曲线 customPlot-\u003eaddGraph(); QPen bluePen; bluePen.setColor(QColor(\"#33CCCC\")); bluePen.setWidthF(2.5); customPlot-\u003egraph(0)-\u003esetPen(bluePen); customPlot-\u003egraph(0)-\u003esetName(tr(\"数据1\")); //曲线上数据点的样式，大小；这里设置为空心圆 customPlot-\u003egraph(0)-\u003esetScatterStyle(QCPScatterStyle(QCPScatterStyle::ssCircle, 5)); //添加第二条曲线 customPlot-\u003eaddGraph(); QPen greenPen; greenPen.setColor(QColor(\"#0066CC\")); greenPen.setWidthF(2.5); customPlot-\u003egraph(1)-\u003esetPen(greenPen); customPlot-\u003egraph(1)-\u003esetName(tr(\"数据2\")); customPlot-\u003egraph(1)-\u003esetScatterStyle(QCPScatterStyle(QCPScatterStyle::ssCircle, 5)); //添加第三条曲线 customPlot-\u003eaddGraph(); QPen redPen; redPen.setColor(QColor(\"#FF3366\")); redPen.setWidthF(2.5); customPlot-\u003egraph(2)-\u003esetPen(redPen); customPlot-\u003egraph(2)-\u003esetName(tr(\"数据3\")); customPlot-\u003egraph(2)-\u003esetScatterStyle(QCPScatterStyle(QCPScatterStyle::ssCircle, 5)); customPlot-\u003eaxisRect()-\u003einsetLayout()-\u003esetInsetAlignment(0, Qt::AlignTop|Qt::AlignRight);//标签位置 // set blank axis lines: customPlot-\u003exAxis-\u003esetTicks(true); //刻度 customPlot-\u003eyAxis-\u003esetTicks(true); customPlot-\u003exAxis-\u003esetTickLabels(true); //文本 customPlot-\u003eyAxis-\u003esetTickLabels(true); // make top right axes clones of bottom left axes: /* 一个默认的坐标轴矩形配置，包括：顶部坐标轴跟随底部坐标轴同步、右侧坐标轴跟随左侧坐标轴同步， 不仅仅是坐标轴范围跟随同步，包括文本精度、文本格式、坐标轴类型、是否自动生成刻度、刻度间距等等。 */ customPlot-\u003eaxisRect()-\u003esetupFullAxesBox(); } ","date":"2017-12-28","objectID":"/2017-12-28-qt%E5%9B%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-qcustomplot/:4:0","tags":["QT","C++"],"title":"QT图表解决方案-QCustomPlot","uri":"/2017-12-28-qt%E5%9B%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-qcustomplot/"},{"categories":["QT"],"content":"3、回调函数（QT槽函数） 通过QT中的信号和槽机制，外部发送Signal来调用槽函数。 以下（2）举例，创建信号和槽： changePlotsRangeSignal = new SIGNALS(); connect(changePlotsRangeSignal,SIGNAL(changePlotsRangeSignal()), this, SLOT(changePlotsRangeCb())); 外部调用： changePlotsRangeSignal-\u003esendChangePlotsRangeSignal(); ","date":"2017-12-28","objectID":"/2017-12-28-qt%E5%9B%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-qcustomplot/:5:0","tags":["QT","C++"],"title":"QT图表解决方案-QCustomPlot","uri":"/2017-12-28-qt%E5%9B%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-qcustomplot/"},{"categories":["QT"],"content":"（1）接收数据，实时刷新UI 每接收到一次数据时，调用该函数，实时刷新图表。 int data_size = 10000; QVector\u003cdouble\u003e data1_x_(data_size), data1_y_(data_size); QVector\u003cdouble\u003e data2_x_(data_size), data2_y_(data_size); QVector\u003cdouble\u003e data3_x_(data_size), data3_y_(data_size); int recv_count = 0; void MainWindow::changePlotsDataCb(float data1_x, float data1_y, float data2_x, float data2_y, float data3_x, float data3_y) { data1_x_[recv_count] = data1_x; data1_y_[recv_count] = data1_y; data2_x_[recv_count] = data2_x; data2_y_[recv_count] = data2_y; data3_x_[recv_count] = data3_x; data3_y_[recv_count] = data3_y; recv_count ++; customPlot-\u003egraph(0)-\u003esetData(data1_x_, data1_y_); customPlot-\u003egraph(1)-\u003esetData(data2_x_, data2_y_); customPlot-\u003egraph(2)-\u003esetData(data3_x_, data3_y_); customPlot-\u003egraph(0)-\u003erescaleAxes(true); //坐标轴自适应 customPlot-\u003egraph(1)-\u003erescaleAxes(true); //坐标轴自适应 customPlot-\u003egraph(2)-\u003erescaleAxes(true); //坐标轴自适应 customPlot-\u003ereplot(); //重绘 } ","date":"2017-12-28","objectID":"/2017-12-28-qt%E5%9B%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-qcustomplot/:5:1","tags":["QT","C++"],"title":"QT图表解决方案-QCustomPlot","uri":"/2017-12-28-qt%E5%9B%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-qcustomplot/"},{"categories":["QT"],"content":"（2）修改图表比例 数据接收完毕后调用一次，缩放图表，优化显示效果。 void MainWindow::changePlotsRangeCb() { // zoom out a bit: customPlot-\u003eyAxis-\u003escaleRange(1.1, customPlot-\u003eyAxis-\u003erange().center()); customPlot-\u003exAxis-\u003escaleRange(1.1, customPlot-\u003exAxis-\u003erange().center()); customPlot-\u003ereplot(); } ","date":"2017-12-28","objectID":"/2017-12-28-qt%E5%9B%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-qcustomplot/:5:2","tags":["QT","C++"],"title":"QT图表解决方案-QCustomPlot","uri":"/2017-12-28-qt%E5%9B%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-qcustomplot/"},{"categories":["QT"],"content":"（3）清除图表数据 void MainWindow::clearPlotsDataCb() { customPlot-\u003egraph(0)-\u003edata().data()-\u003eclear(); customPlot-\u003egraph(1)-\u003edata().data()-\u003eclear(); customPlot-\u003egraph(2)-\u003edata().data()-\u003eclear(); customPlot-\u003ereplot(); } 若之前调用过（2），那么清除后需要将图表比例复原。 customPlot-\u003eyAxis-\u003escaleRange(0.9, customPlot-\u003eyAxis-\u003erange().center());\rcustomPlot-\u003exAxis-\u003escaleRange(0.9, customPlot-\u003exAxis-\u003erange().center());\r ","date":"2017-12-28","objectID":"/2017-12-28-qt%E5%9B%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-qcustomplot/:5:3","tags":["QT","C++"],"title":"QT图表解决方案-QCustomPlot","uri":"/2017-12-28-qt%E5%9B%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-qcustomplot/"},{"categories":["QT"],"content":"4、效果预览 ","date":"2017-12-28","objectID":"/2017-12-28-qt%E5%9B%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-qcustomplot/:6:0","tags":["QT","C++"],"title":"QT图表解决方案-QCustomPlot","uri":"/2017-12-28-qt%E5%9B%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-qcustomplot/"},{"categories":["QT"],"content":"5、代码下载 Demo地址 三、推荐资料 QCustomPlot使用分享 一共7篇文章，介绍的比较详细。 QCustomPlot绘图控件的使用 一些图表初始化时常用的设置 ","date":"2017-12-28","objectID":"/2017-12-28-qt%E5%9B%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-qcustomplot/:7:0","tags":["QT","C++"],"title":"QT图表解决方案-QCustomPlot","uri":"/2017-12-28-qt%E5%9B%BE%E8%A1%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-qcustomplot/"}]